using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Collections.Generic;
using VulnerabilityScanner.Exceptions;

namespace VulnerabilityScanner
{
    public class Scanner
    {
        private enum VulnerabilityType
        {
            JsEvilScript,
            RmRf,
            RunDll32
        }
        private record ScanStatus
        {
            public int ProcessedFiles { get; set; }
            public Dictionary<VulnerabilityType, int> Vulnerabilities { get; set; }
            public int ErrorCount { get; set; }
            public TimeSpan ExecutionTime { get; set; }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder();
                sb.Append($"Processed files: {ProcessedFiles}\n");
                foreach (var KeyValue in Vulnerabilities)
                {
                    sb.Append($"{Enum.GetName<VulnerabilityType>(KeyValue.Key)}: {KeyValue.Value}");
                }
                sb.Append($"Error count: {ErrorCount}");
                sb.Append($"Execution time: {ExecutionTime}");

                return sb.ToString();
            }
        }

        private string scanDirectory;
        private bool performedScan = false;
        private ScanStatus scanStatus;
        
        public string ScanDirectory { get; set; }

        public Scanner(string dir)
        {
            scanDirectory = dir;
        }

        public void Run()
        {
            /*
             * 1. Check if directory exists
             * 2. Open every file and read line by line (optional - do this in parallel ???)
             * 3. If line == (one of three sus options) => update
             * 4. Specific check for 
             */
            if (!Directory.Exists(scanDirectory))
            {
                throw new DirectoryNotFoundException(scanDirectory);
            }
            
            scanStatus = new ScanStatus
            {
                Vulnerabilities = Enum.GetValues<VulnerabilityType>()
                    .ToDictionary(vt => vt, vt => 0)
            };
            
            performedScan = true;
        }

        public string StringStatus()
        {
            if (!performedScan)
            {
                throw new StatusNotAccessibleException(scanDirectory);
            }

            StringBuilder scanStatusBuilder = new StringBuilder();
            scanStatusBuilder.Append("==== Scan result ====\n\n");
            scanStatusBuilder.Append(scanStatus);
            scanStatusBuilder.Append("================");

            return scanStatusBuilder.ToString();
        }
    }
}