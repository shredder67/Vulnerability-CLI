using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Collections.Generic;
using VulnerabilityScanner.Exceptions;

namespace VulnerabilityScanner
{
    public class Scanner
    {
        private enum VulnerabilityType
        {
            JsEvilScript,
            RmRf,
            RunDll32
        }

        private record Vulnerability(VulnerabilityType Type, string KeyLine, HashSet<string> FileExtensions);
        private class ScanStatus
        {
            public int ProcessedFiles { get; set; }
            public Dictionary<Vulnerability, int> VulnerabilityCounters { get; set; }
            public int ErrorCount { get; set; }
            public TimeSpan ExecutionTime { get; set; }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder();
                sb.Append($"Processed files: {ProcessedFiles}\n");
                foreach (var KeyValue in VulnerabilityCounters)
                {
                    sb.Append($"{Enum.GetName(KeyValue.Key.Type)}: {KeyValue.Value}\n");
                }
                sb.Append($"Error count: {ErrorCount}\n");
                sb.Append($"Execution time: {ExecutionTime}");

                return sb.ToString();
            }
        }

        private List<Vulnerability> Vulnerabilities;
        
        private string scanDirectory;
        private bool performedScan = false;
        private ScanStatus scanStatus;

        public string ScanDirectory { get; set; }

        public Scanner(string dir)
        {
            scanDirectory = dir;
            Vulnerabilities = new List<Vulnerability>
            {
                new Vulnerability(
                    VulnerabilityType.JsEvilScript, 
                    "<script>evil_script()</script>", 
                    new HashSet<string>(){ "js" } ),
                new Vulnerability(
                    VulnerabilityType.RmRf,
                    "rm -rf %userprofile%\\Documents",
                    new HashSet<string>()
                    ),
                new Vulnerability(
                    VulnerabilityType.RunDll32,
                    "Rundll32 sus.dll SusEntry",
                    new HashSet<string>()
                    )
            };
        }

        public void Run()
        {
            /*
             * 1. Check if directory exists
             * 2. Open every file and read line by line (optional - do this in parallel ???)
             * 3. If line == (one of three sus options) => update
             * 4. Specific check for 
             */

            if (!Directory.Exists(scanDirectory))
            {
                throw new DirectoryNotFoundException(scanDirectory);
            }
            
            scanStatus = new ScanStatus
            {
                VulnerabilityCounters = Vulnerabilities.ToDictionary(v => v, v => 0)
            };

            var files = Directory.GetFiles(scanDirectory);
            Console.WriteLine(files[0]);
            
            performedScan = true;
        }

        public string StringStatus()
        {
            if (!performedScan)
            {
                throw new StatusNotAccessibleException(scanDirectory);
            }

            StringBuilder scanStatusBuilder = new StringBuilder();
            scanStatusBuilder.Append("==== Scan result ====\n\n");
            scanStatusBuilder.Append(scanStatus);
            scanStatusBuilder.Append("\n\n================\n");

            return scanStatusBuilder.ToString();
        }
    }
}